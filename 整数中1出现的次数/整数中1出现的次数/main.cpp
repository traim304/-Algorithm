//求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
//为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙
//ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。
#include <iostream>
using namespace std;




//结论:
//设N = abcde ,其中abcde分别为十进制中各位上的数字。
//如果要计算百位上1出现的次数，它要受到3方面的影响：百位的数字，百位以下（低位）上的数字，百位以上（高位）上的数字。

//如果百位上数字为0，百位上可能出现1的次数由 更高位 决定。
//比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，.........，11100~11199，一共1200个。         可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。

//如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。
//比如：12113，则可以知道百位受高位影响出现的情况是：100~199，1100~1199,2100~2199，，.........，11100~11199，一共1200个。和上面情况一样，   并且等于更高位数字（12）乘以 当前位数（100）。  但同时它还受低位影响，百位出现1的情况是：12100~12113,一共114个，  等于低位数字（113）+1。

//如果百位上数字大于1（2~9），则百位上出现1的情况仅由 更高位 决定.
//比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...........，11100~11199,12100~12199,一共有1300个，并且等于  更高位数字+1（12+1）乘以当前位数（100）。
int main(int argc, const char * argv[]) {
    long long number = 0;
    cout << "输入该数字: " << endl;
    cin >> number;
    int i = 1;
    
    int number_of_1 = 0;
    long long tmp = number;
    
    int all_dig = 1;
    while (tmp /= 10) {
        all_dig++;
    }
    
    //排除个位数
    if (all_dig == 1) {
        if (number == 0) {
            number_of_1 = 0;
            cout << " 1 的所有个数为: " << number_of_1 << endl;
            return 0;
        }
        else
        {
            number_of_1 = 1;
            cout << " 1 的所有个数为: " << number_of_1 << endl;
            return 0;

        }
    }
    
    
   while (all_dig--) {
       
        //分割出高,低,以及当前位
        long long left = number / (i * 10);
        long long right = number % i;
        long cur_dig = (number/i) % 10;
       
       //当cur到达边界
       if (cur_dig == 0 && left == 0) {
           break;
       }
       
       

       if(cur_dig == 0)
       {
           number_of_1 += left * i;
       }
       else if (cur_dig == 1)
       {
           number_of_1 += left * i;
           number_of_1 += right+1;
       }
       else
       {
           number_of_1 += (left+1) * i;
       }
       
       i = i * 10;
    }
    
    
    cout << " 1 的所有个数为: " << number_of_1 << endl;
    return 0;
}
